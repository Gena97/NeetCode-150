func threeSum(nums []int) [][]int {
	var res [][]int // Создаем слайс для хранения результатов.

	if len(nums) < 3 {
		return res // Если длина массива меньше 3, то невозможно найти тройки, возвращаем пустой результат.
	}

	sort.Ints(nums) // Сортируем массив, чтобы облегчить поиск.

	for i := 0; i < len(nums)-2; i++ {
		if i > 0 && nums[i] == nums[i-1] {
			continue // Пропускаем повторяющиеся элементы, чтобы избежать дубликатов результатов.
		}

		left, right := i+1, len(nums)-1 // Устанавливаем указатели для двух элементов, которые будем суммировать.

		for left < right {
			target := nums[i] + nums[left] + nums[right] // Считаем текущую сумму.

			if target == 0 {
				res = append(res, []int{nums[i], nums[left], nums[right]}) // Если сумма равна нулю, добавляем тройку в результат.

				// Пропускаем все повторяющиеся элементы слева и справа.
				for left < right && nums[left] == nums[left-1] {
					left++
				}

				for left < right && nums[right] == nums[right+1] {
					right--
				}

				left++
				right--
			} else if target > 0 {
				right-- // Если сумма больше нуля, уменьшаем сумму, двигая правый указатель влево.
			} else {
				left++ // Если сумма меньше нуля, увеличиваем сумму, двигая левый указатель вправо.
			}
		}
	}

	return res // Возвращаем результат, содержащий все уникальные тройки с нулевой суммой.
}