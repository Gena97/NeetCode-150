// Функция backtrack генерирует все комбинации правильно сформированных скобок.
// cur - текущая комбинация скобок, openN - количество оставшихся открывающих скобок,
// closeN - количество оставшихся закрывающих скобок, result - срез для сохранения результатов.
func backtrack(cur string, openN int, closeN int, result *[]string) {
	// Если не осталось ни одной открывающей и закрывающей скобки, это правильная комбинация.
	if openN == 0 && closeN == 0 {
		*result = append(*result, cur)
		return
	}

	// Если ещё остались открывающие скобки, добавляем открывающую скобку в текущую комбинацию.
	if openN > 0 {
		backtrack(cur+"(", openN-1, closeN, result)
	}

	// Если количество открывающих скобок меньше количества закрывающих,
	// добавляем закрывающую скобку в текущую комбинацию.
	if openN < closeN {
		backtrack(cur+")", openN, closeN-1, result)
	}
}

// Функция generateParenthesis генерирует все комбинации правильно сформированных скобок
// с заданным количеством пар скобок n.
func generateParenthesis(n int) []string {
	result := []string{}            // Сюда будут сохранены результаты.
	backtrack("(", n-1, n, &result) // Начинаем с открывающей скобки и n-1 оставшихся открывающих скобок.
	return result
}
