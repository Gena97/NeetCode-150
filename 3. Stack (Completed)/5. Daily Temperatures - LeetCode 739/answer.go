type stack struct {
	temp int
	num  int
}

func dailyTemperatures(temperatures []int) []int {

	if len(temperatures) == 1 {
		return []int{0}
	}

	res := make([]int, len(temperatures))
	stacks := []stack{}

	for i, temp := range temperatures {
		// Перебираем стек, начиная с последнего элемента
		for j := len(stacks) - 1; j >= 0; j-- {
			// Проверяем, является ли текущая температура более тёплой, чем температура в вершине стека.
			if temp > stacks[j].temp {
				// Если текущая температура более тёплая, то обновляем ответы.
				// Разница между текущим индексом i и индексом элемента в стеке stacks[j].num
				// показывает, сколько дней нужно подождать, чтобы получить более тёплую температуру.
				res[stacks[j].num] = i - stacks[j].num
				// Удаляем элемент из стека, так как он больше не нужен для расчетов.
				stacks = stacks[:j]
			} else {
				// Если текущая температура не более тёплая, то прерываем цикл,
				// так как не имеет смысла сравнивать с более старыми температурами в стеке.
				break
			}
		}
		// Создаем новую структуру stack для текущей температуры и индекса i.
		// Эта структура будет добавлена в стек для последующих сравнений.
		newStack := stack{
			temp: temp, // Текущая температура.
			num:  i,    // Индекс текущего элемента в массиве temperatures.
		}
		// Добавляем новую структуру в стек для последующих сравнений.
		stacks = append(stacks, newStack)
	}

	// Возвращаем массив с ответами.
	return res
}
