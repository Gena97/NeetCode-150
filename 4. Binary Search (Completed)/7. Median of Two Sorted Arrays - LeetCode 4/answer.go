func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	len1, len2 := len(nums1), len(nums2)

	// Проверяем случай, когда оба массива пусты. Возвращаем 0.
	if len1 == 0 && len2 == 0 {
		return 0
	}

	// Проверяем случай, когда первый массив не пуст, а второй пуст. Возвращаем медиану первого массива.
	if len1 != 0 && len2 == 0 {
		return GetMedian(nums1)
	}

	// Проверяем случай, когда первый массив пуст, а второй не пуст. Возвращаем медиану второго массива.
	if len1 == 0 && len2 != 0 {
		return GetMedian(nums2)
	}

	// Создаем пустой массив ar, в который будем объединять отсортированные массивы.
	ar := make([]int, 0)

	// Инициализируем переменные curNum1 и curNum2 для отслеживания текущей позиции в каждом из массивов.
	curNum1, curNum2 := 0, 0

	// Объединяем два массива в один отсортированный массив ar.
	for i := 0; i < len1+len2; i++ {
		if curNum1 < len1 && curNum2 < len2 {
			// Если текущий элемент в первом массиве меньше, добавляем его в ar и увеличиваем curNum1.
			if nums1[curNum1] < nums2[curNum2] {
				ar = append(ar, nums1[curNum1])
				curNum1++
			} else {
				// Если текущий элемент во втором массиве меньше, добавляем его в ar и увеличиваем curNum2.
				ar = append(ar, nums2[curNum2])
				curNum2++
			}
		} else if curNum1 == len1 {
			// Если дошли до конца первого массива, добавляем оставшиеся элементы из второго массива в ar.
			ar = append(ar, nums2[curNum2])
			curNum2++
		} else if curNum2 == len2 {
			// Если дошли до конца второго массива, добавляем оставшиеся элементы из первого массива в ar.
			ar = append(ar, nums1[curNum1])
			curNum1++
		} else {
			// Если какой-то другой случай, просто продолжаем выполнение.
			continue
		}
	}

	// Выводим ar в консоль (можно убрать это после отладки).
	fmt.Print(ar)

	// Возвращаем медиану отсортированного массива ar.
	return GetMedian(ar)
}

// Функция для вычисления медианы массива.
func GetMedian(ar []int) float64 {
	if len(ar) == 0 {
		return 0
	}

	if len(ar) == 1 {
		// Если массив состоит из одного элемента, возвращаем его как медиану.
		return float64(ar[0])
	}

	if len(ar)%2 == 1 {
		// Если массив имеет нечетную длину, возвращаем средний элемент как медиану.
		return float64(ar[len(ar)/2])
	}

	if len(ar)%2 == 0 {
		// Если массив имеет четную длину, возвращаем среднее значение двух средних элементов как медиану.
		return (float64(ar[len(ar)/2]) + float64(ar[len(ar)/2-1])) / 2
	}

	// Возвращаем 0 в случае, если что-то пошло не так.
	return 0
}
