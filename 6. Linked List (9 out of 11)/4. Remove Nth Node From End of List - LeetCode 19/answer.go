func removeNthFromEnd(head *ListNode, n int) *ListNode {
	// Обработка базового случая: если список содержит только один узел,
	// то его следует удалить, и результатом будет nil.
	if head.Next == nil {
		return nil
	}

	// Создаем карту (map) для хранения индексов узлов связанного списка.
	m := make(map[int]*ListNode)

	// Инициализируем текущий узел и индекс.
	curNode := head
	i := 1

	// Заполняем карту, сохраняя каждый узел и его индекс.
	for curNode != nil {
		m[i] = curNode
		curNode = curNode.Next
		i++
	}

	// Если удаляемый узел - первый (с конца), обновляем голову списка и возвращаем ее.
	if n == i-1 {
		head = head.Next
		return head
	} else {
		// В противном случае, переопределяем указатель Next предыдущего узла
		// так, чтобы он указывал на узел, следующий за удаляемым узлом.
		m[i-n-1].Next = m[i-n+1]
	}

	// Возвращаем обновленную голову списка.
	return head
}